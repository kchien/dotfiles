# to source this while in tmux:
# <prefix>:source ~/.tmux.conf
#
set -g mouse on
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
bind -n WheelDownPane select-pane -t= \; send-keys -M

#You can make tmux use the normal screen by telling it that your terminal does
#not have an alternate screen. Put the following in ~/.tmux.conf:
set -ga terminal-overrides ',screen*:smcup@:rmcup@'
#	Adjust if your $TERM does not start with xterm.

#scroll history
set -g history-limit 30000

#--------
#From https://robots.thoughtbot.com/tmux-copy-paste-on-os-x-a-better-future
#
#Usage
#
#1. <prefix> [ to start “copy-mode” (Not sure what <prefix> is? This post can help)
#2. Move to the text you want to copy using Vim-like key bindings, i.e., k to move up a line, / to search, etc.
#3. v to start selection
#4. Move to end of text with Vim key-bindings. The selection will be highlighted
#5. y to copy the highlighted/selected text
#
#The selected text is now in your clipboard, and your day is that much better for it.
#--------
# Use vim keybindings in copy mode
setw -g mode-keys vi

# # Setup 'v' to begin selection as in Vim
bind-key -t vi-copy v begin-selection
bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# # Update default binding of `Enter` to also use copy-pipe
unbind -t vi-copy Enter
bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"

# Our .tmux.conf file

# Setting the prefix from C-b to C-a
# set -g prefix C-a
#
# Free the original Ctrl-b prefix keybinding
#unbind C-b
#
#setting the delay between prefix and command
set -s escape-time 1
#
# Ensure that we can send Ctrl-A to other apps
bind C-a send-prefix

# Set the base index for windows to 1 instead of 0
set -g base-index 1

# Set the base index for panes to 1 instead of 0
setw -g pane-base-index 1

# Reload the file with Prefix r
bind r source-file ~/.tmux.conf \; display "Reloaded!"

# splitting panes with | and -
bind | split-window -h
bind - split-window -v

# moving between panes with Prefix h,j,k,l
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Quick window selection
bind -r C-h select-window -t :-
bind -r C-l select-window -t :+

# Pane resizing panes with Prefix H,J,K,L
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# mouse support - set to on if you want to use the mouse
set -g mouse off

# Set the default terminal mode to 256color mode
set -g default-terminal "screen-256color"

# set the status line's colors
set -g status-style fg=white,bg=black

# set the color of the window list
setw -g window-status-style fg=cyan,bg=black

# set colors for the active window
setw -g window-status-current-style fg=white,bold,bg=red

# colors for pane borders
setw -g pane-border-style fg=green,bg=black
setw -g pane-border-active-style fg=white,bg=yellow

# active pane normal, other shaded out
setw -g window-style fg=colour240,bg=colour235
setw -g window-active-style fg=white,bg=black

# Command / message line
setw -g message-style fg=white,bold,bg=black

# Status line left side to show Session:window:pane
set -g status-left-length 40
set -g status-left "#[fg=green]Session: #S #[fg=yellow]#I #[fg=cyan]#P"

# Status line right side -  50% | 31 Oct 13:37
set -g status-right "#(~/battery Discharging) | #[fg=cyan]%d %b %R"

# Update the status line every sixty seconds
set -g status-interval 60

# Center the window list in the status line
set -g status-justify centre

# enable activity alerts
setw -g monitor-activity on
set -g visual-activity on

# enable vi keys.
setw -g mode-keys vi

# shortcut for synchronize-panes toggle
bind C-s set-window-option synchronize-panes

# split pane and retain the current directory of existing pane
bind _ split-window -v -c  "#{pane_current_path}"
bind \ split-window -h -c "#{pane_current_path}"

# Log output to a text file on demand
bind P pipe-pane -o "cat >>~/#W.log" \; display "Toggled logging to ~/#W.log"
#
# Load mac-specific settings
if-shell "uname | grep -q Darwin" "source-file ~/.tmux.mac.conf"

# load private settings if they exist
if-shell "[ -f ~/.tmux.private]" "source ~/.tmux.private"

is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

bind C-l send-keys 'C-l'

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-resurrect'
run '~/.tmux/plugins/tpm/tpm'
1

